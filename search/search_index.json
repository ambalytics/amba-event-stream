{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"amba-event-stream amba analytics event stream python package that connects to kafka to produce/connect or process events. Installation pip install amba-event-stream Releasing Releases are published automatically when a tag is pushed to GitHub. # Set next version number export RELEASE=x.x.x # Create tags git commit --allow-empty -m \"Release $RELEASE\" git tag -a $RELEASE -m \"Version $RELEASE\" # Push git push upstream --tags","title":"Home"},{"location":"#amba-event-stream","text":"amba analytics event stream python package that connects to kafka to produce/connect or process events.","title":"amba-event-stream"},{"location":"#installation","text":"pip install amba-event-stream","title":"Installation"},{"location":"#releasing","text":"Releases are published automatically when a tag is pushed to GitHub. # Set next version number export RELEASE=x.x.x # Create tags git commit --allow-empty -m \"Release $RELEASE\" git tag -a $RELEASE -m \"Version $RELEASE\" # Push git push upstream --tags","title":"Releasing"},{"location":"event_ref/","text":"event object Event a representation of an json event to use from_json ( self , json_msg ) set this event from json_msg Parameters: Name Type Description Default json_msg loaded json required Source code in event_stream/event.py def from_json ( self , json_msg ): \"\"\"set this event from json_msg Arguments: json_msg: loaded json \"\"\" self . data = json_msg # self.data = json.loads(json_msg) get ( self , key ) this will get a value to a given key in the data of this event this is equal to data['key'] if access to nested properties is needed use data directly Parameters: Name Type Description Default key a valid key for the data of this event required Source code in event_stream/event.py def get ( self , key ): \"\"\"this will get a value to a given key in the data of this event this is equal to data['key'] if access to nested properties is needed use data directly Arguments: key: a valid key for the data of this event \"\"\" return self . data [ key ] # t = self.data # # todo check if key exist # for key in keys: # t = t[key] # return t get_json ( self ) return this event as json equal to json.dumps(data) Source code in event_stream/event.py def get_json ( self ): \"\"\"return this event as json equal to json.dumps(data) \"\"\" return json . dumps ( self . data ) set ( self , key , value ) this will set a value to a given key in the data of this event this is equal to data['key'] = value if setting nested properties use data directly Parameters: Name Type Description Default key a valid key for the data of this event required value the value to store required Source code in event_stream/event.py def set ( self , key , value ): \"\"\"this will set a value to a given key in the data of this event this is equal to data['key'] = value if setting nested properties use data directly Arguments: key: a valid key for the data of this event value: the value to store \"\"\" self . data [ key ] = value","title":"event"},{"location":"event_ref/#event_stream.event.Event","text":"a representation of an json event to use","title":"Event"},{"location":"event_ref/#event_stream.event.Event.from_json","text":"set this event from json_msg Parameters: Name Type Description Default json_msg loaded json required Source code in event_stream/event.py def from_json ( self , json_msg ): \"\"\"set this event from json_msg Arguments: json_msg: loaded json \"\"\" self . data = json_msg # self.data = json.loads(json_msg)","title":"from_json()"},{"location":"event_ref/#event_stream.event.Event.get","text":"this will get a value to a given key in the data of this event this is equal to data['key'] if access to nested properties is needed use data directly Parameters: Name Type Description Default key a valid key for the data of this event required Source code in event_stream/event.py def get ( self , key ): \"\"\"this will get a value to a given key in the data of this event this is equal to data['key'] if access to nested properties is needed use data directly Arguments: key: a valid key for the data of this event \"\"\" return self . data [ key ] # t = self.data # # todo check if key exist # for key in keys: # t = t[key] # return t","title":"get()"},{"location":"event_ref/#event_stream.event.Event.get_json","text":"return this event as json equal to json.dumps(data) Source code in event_stream/event.py def get_json ( self ): \"\"\"return this event as json equal to json.dumps(data) \"\"\" return json . dumps ( self . data )","title":"get_json()"},{"location":"event_ref/#event_stream.event.Event.set","text":"this will set a value to a given key in the data of this event this is equal to data['key'] = value if setting nested properties use data directly Parameters: Name Type Description Default key a valid key for the data of this event required value the value to store required Source code in event_stream/event.py def set ( self , key , value ): \"\"\"this will set a value to a given key in the data of this event this is equal to data['key'] = value if setting nested properties use data directly Arguments: key: a valid key for the data of this event value: the value to store \"\"\" self . data [ key ] = value","title":"set()"},{"location":"event_stream_base_ref/","text":"EventStreamBase a base class for connecting to kafka","title":"event stream base"},{"location":"event_stream_base_ref/#event_stream.event_stream_base.EventStreamBase","text":"a base class for connecting to kafka","title":"EventStreamBase"},{"location":"event_stream_consumer_ref/","text":"EventStreamConsumer a base consumer class for consuming from kafka uses multiprocessing to share workload log create the consumer, connect to kafka","title":"event stream consumer"},{"location":"event_stream_consumer_ref/#event_stream.event_stream_consumer.EventStreamConsumer","text":"a base consumer class for consuming from kafka uses multiprocessing to share workload","title":"EventStreamConsumer"},{"location":"event_stream_consumer_ref/#event_stream.event_stream_consumer.EventStreamConsumer.log","text":"create the consumer, connect to kafka","title":"log"},{"location":"event_stream_producer_ref/","text":"EventStreamProducer produce messages for kafka log publish an event Parameters: Name Type Description Default event the event which should be shared required","title":"event stream producer"},{"location":"event_stream_producer_ref/#event_stream.event_stream_producer.EventStreamProducer","text":"produce messages for kafka","title":"EventStreamProducer"},{"location":"event_stream_producer_ref/#event_stream.event_stream_producer.EventStreamProducer.log","text":"publish an event Parameters: Name Type Description Default event the event which should be shared required","title":"log"}]}